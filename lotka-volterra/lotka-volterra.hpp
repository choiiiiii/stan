
// Code generated by stanc v2.22.1
#include <stan/model/model_header.hpp>
namespace lotka_volterra_model_namespace {

template <typename T, typename S>
std::vector<T> resize_to_match__(std::vector<T>& dst, const std::vector<S>& src) {
  dst.resize(src.size());
  return dst;
}

template <typename T>
Eigen::Matrix<T, -1, -1>
resize_to_match__(Eigen::Matrix<T, -1, -1>& dst, const Eigen::Matrix<T, -1, -1>& src) {
  dst.resize(src.rows(), src.cols());
  return dst;
}

template <typename T>
Eigen::Matrix<T, 1, -1>
resize_to_match__(Eigen::Matrix<T, 1, -1>& dst, const Eigen::Matrix<T, 1, -1>& src) {
  dst.resize(src.size());
  return dst;
}

template <typename T>
Eigen::Matrix<T, -1, 1>
resize_to_match__(Eigen::Matrix<T, -1, 1>& dst, const Eigen::Matrix<T, -1, 1>& src) {
  dst.resize(src.size());
  return dst;
}
std::vector<double> to_doubles__(std::initializer_list<double> x) {
  return x;
}

std::vector<stan::math::var> to_vars__(std::initializer_list<stan::math::var> x) {
  return x;
}

inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math; 

static int current_statement__ = 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/casestudy/lotka-volterra/lotka-volterra.stan', line 27, column 2 to column 27)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/casestudy/lotka-volterra/lotka-volterra.stan', line 28, column 2 to column 28)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/casestudy/lotka-volterra/lotka-volterra.stan', line 29, column 2 to column 27)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/casestudy/lotka-volterra/lotka-volterra.stan', line 32, column 2 to line 35, column 42)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/casestudy/lotka-volterra/lotka-volterra.stan', line 48, column 2 to column 21)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/casestudy/lotka-volterra/lotka-volterra.stan', line 49, column 2 to column 19)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/casestudy/lotka-volterra/lotka-volterra.stan', line 51, column 4 to column 60)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/casestudy/lotka-volterra/lotka-volterra.stan', line 53, column 6 to column 58)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/casestudy/lotka-volterra/lotka-volterra.stan', line 52, column 4 to line 53, column 58)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/casestudy/lotka-volterra/lotka-volterra.stan', line 50, column 17 to line 54, column 3)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/casestudy/lotka-volterra/lotka-volterra.stan', line 50, column 2 to line 54, column 3)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/casestudy/lotka-volterra/lotka-volterra.stan', line 38, column 2 to column 33)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/casestudy/lotka-volterra/lotka-volterra.stan', line 39, column 2 to column 37)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/casestudy/lotka-volterra/lotka-volterra.stan', line 40, column 2 to column 27)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/casestudy/lotka-volterra/lotka-volterra.stan', line 41, column 2 to column 33)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/casestudy/lotka-volterra/lotka-volterra.stan', line 43, column 4 to column 52)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/casestudy/lotka-volterra/lotka-volterra.stan', line 44, column 4 to column 47)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/casestudy/lotka-volterra/lotka-volterra.stan', line 42, column 17 to line 45, column 3)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/casestudy/lotka-volterra/lotka-volterra.stan', line 42, column 2 to line 45, column 3)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/casestudy/lotka-volterra/lotka-volterra.stan', line 21, column 2 to column 19)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/casestudy/lotka-volterra/lotka-volterra.stan', line 22, column 2 to column 13)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/casestudy/lotka-volterra/lotka-volterra.stan', line 23, column 2 to column 17)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/casestudy/lotka-volterra/lotka-volterra.stan', line 24, column 2 to column 26)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/casestudy/lotka-volterra/lotka-volterra.stan', line 7, column 4 to column 18)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/casestudy/lotka-volterra/lotka-volterra.stan', line 8, column 4 to column 18)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/casestudy/lotka-volterra/lotka-volterra.stan', line 10, column 4 to column 26)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/casestudy/lotka-volterra/lotka-volterra.stan', line 11, column 4 to column 25)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/casestudy/lotka-volterra/lotka-volterra.stan', line 12, column 4 to column 26)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/casestudy/lotka-volterra/lotka-volterra.stan', line 13, column 4 to column 26)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/casestudy/lotka-volterra/lotka-volterra.stan', line 15, column 4 to column 40)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/casestudy/lotka-volterra/lotka-volterra.stan', line 16, column 4 to column 42)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/casestudy/lotka-volterra/lotka-volterra.stan', line 17, column 4 to column 28)",
                                                      " (in '/Users/hyunjimoon/Dropbox/stan/casestudy/lotka-volterra/lotka-volterra.stan', line 6, column 26 to line 18, column 3)"};

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__,
T3__>::type>
dz_dt(const T0__& t, const std::vector<T1__>& z,
      const std::vector<T2__>& theta, const std::vector<T3__>& x_r,
      const std::vector<int>& x_i, std::ostream* pstream__) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__>::type;
  const static bool propto__ = true;
  (void) propto__;
  
  try {
    local_scalar_t__ u;
    
    current_statement__ = 24;
    u = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 24;
    u = z[(1 - 1)];
    local_scalar_t__ v;
    
    current_statement__ = 25;
    v = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 25;
    v = z[(2 - 1)];
    local_scalar_t__ alpha;
    
    current_statement__ = 26;
    alpha = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 26;
    alpha = theta[(1 - 1)];
    local_scalar_t__ beta;
    
    current_statement__ = 27;
    beta = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 27;
    beta = theta[(2 - 1)];
    local_scalar_t__ gamma;
    
    current_statement__ = 28;
    gamma = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 28;
    gamma = theta[(3 - 1)];
    local_scalar_t__ delta;
    
    current_statement__ = 29;
    delta = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 29;
    delta = theta[(4 - 1)];
    local_scalar_t__ du_dt;
    
    current_statement__ = 30;
    du_dt = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 30;
    du_dt = ((alpha - (beta * v)) * u);
    local_scalar_t__ dv_dt;
    
    current_statement__ = 31;
    dv_dt = std::numeric_limits<double>::quiet_NaN();
    current_statement__ = 31;
    dv_dt = ((-gamma + (delta * u)) * v);
    current_statement__ = 32;
    return stan::math::array_builder<local_scalar_t__>().add(du_dt)
        .add(dv_dt).array();
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct dz_dt_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__,
T3__>::type>
operator()(const T0__& t, const std::vector<T1__>& z,
           const std::vector<T2__>& theta, const std::vector<T3__>& x_r,
           const std::vector<int>& x_i, std::ostream* pstream__)  const 
{
return dz_dt(t, z, theta, x_r, x_i, pstream__);
}
};

class lotka_volterra_model : public model_base_crtp<lotka_volterra_model> {

 private:
  int pos__;
  int N;
  std::vector<double> ts;
  std::vector<double> y_init;
  std::vector<std::vector<double>> y;
 
 public:
  ~lotka_volterra_model() { }
  
  std::string model_name() const { return "lotka_volterra_model"; }
  
  lotka_volterra_model(stan::io::var_context& context__,
                       unsigned int random_seed__ = 0,
                       std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    typedef double local_scalar_t__;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "lotka_volterra_model_namespace::lotka_volterra_model";
    (void) function__;  // suppress unused var warning
    
    try {
      
      pos__ = 1;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      
      current_statement__ = 20;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 21;
      validate_non_negative_index("ts", "N", N);
      context__.validate_dims("data initialization","ts","double",
          context__.to_vec(N));
      ts = std::vector<double>(N, 0);
      
      current_statement__ = 21;
      assign(ts, nil_index_list(), context__.vals_r("ts"),
        "assigning variable ts");
      current_statement__ = 22;
      validate_non_negative_index("y_init", "2", 2);
      context__.validate_dims("data initialization","y_init","double",
          context__.to_vec(2));
      y_init = std::vector<double>(2, 0);
      
      current_statement__ = 22;
      assign(y_init, nil_index_list(), context__.vals_r("y_init"),
        "assigning variable y_init");
      current_statement__ = 23;
      validate_non_negative_index("y", "N", N);
      current_statement__ = 23;
      validate_non_negative_index("y", "2", 2);
      context__.validate_dims("data initialization","y","double",
          context__.to_vec(N, 2));
      y = std::vector<std::vector<double>>(N, std::vector<double>(2, 0));
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 23;
        assign(y_flat__, nil_index_list(), context__.vals_r("y"),
          "assigning variable y_flat__");
        current_statement__ = 23;
        pos__ = 1;
        current_statement__ = 23;
        for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 23;
          for (size_t sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 23;
            assign(y,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              y_flat__[(pos__ - 1)], "assigning variable y");
            current_statement__ = 23;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 20;
      current_statement__ = 20;
      check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 23;
      for (size_t sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 23;
        for (size_t sym2__ = 1; sym2__ <= 2; ++sym2__) {
          current_statement__ = 23;
          current_statement__ = 23;
          check_greater_or_equal(function__, "y[sym1__, sym2__]",
                                 y[(sym1__ - 1)][(sym2__ - 1)], 0);}}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      current_statement__ = 1;
      validate_non_negative_index("theta", "4", 4);
      num_params_r__ += 4;
      current_statement__ = 2;
      validate_non_negative_index("z_init", "2", 2);
      num_params_r__ += 2;
      current_statement__ = 3;
      validate_non_negative_index("sigma", "2", 2);
      num_params_r__ += 2;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename T__>
  T__ log_prob(std::vector<T__>& params_r__, std::vector<int>& params_i__,
               std::ostream* pstream__ = 0) const {
    typedef T__ local_scalar_t__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "lotka_volterra_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    
    try {
      current_statement__ = 1;
      validate_non_negative_index("theta", "4", 4);
      std::vector<local_scalar_t__> theta;
      theta = std::vector<local_scalar_t__>(4, 0);
      
      current_statement__ = 1;
      for (size_t sym1__ = 1; sym1__ <= 4; ++sym1__) {
        current_statement__ = 1;
        assign(theta, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable theta");}
      current_statement__ = 1;
      for (size_t sym1__ = 1; sym1__ <= 4; ++sym1__) {
        current_statement__ = 1;
        if (jacobian__) {
          current_statement__ = 1;
          assign(theta, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(theta[(sym1__ - 1)], 0, lp__),
            "assigning variable theta");
        } else {
          current_statement__ = 1;
          assign(theta, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(theta[(sym1__ - 1)], 0),
            "assigning variable theta");
        }}
      current_statement__ = 2;
      validate_non_negative_index("z_init", "2", 2);
      std::vector<local_scalar_t__> z_init;
      z_init = std::vector<local_scalar_t__>(2, 0);
      
      current_statement__ = 2;
      for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 2;
        assign(z_init, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable z_init");}
      current_statement__ = 2;
      for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 2;
        if (jacobian__) {
          current_statement__ = 2;
          assign(z_init, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(z_init[(sym1__ - 1)], 0, lp__),
            "assigning variable z_init");
        } else {
          current_statement__ = 2;
          assign(z_init, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(z_init[(sym1__ - 1)], 0),
            "assigning variable z_init");
        }}
      current_statement__ = 3;
      validate_non_negative_index("sigma", "2", 2);
      std::vector<local_scalar_t__> sigma;
      sigma = std::vector<local_scalar_t__>(2, 0);
      
      current_statement__ = 3;
      for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 3;
        assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable sigma");}
      current_statement__ = 3;
      for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 3;
        if (jacobian__) {
          current_statement__ = 3;
          assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma[(sym1__ - 1)], 0, lp__),
            "assigning variable sigma");
        } else {
          current_statement__ = 3;
          assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma[(sym1__ - 1)], 0),
            "assigning variable sigma");
        }}
      current_statement__ = 4;
      validate_non_negative_index("z", "N", N);
      current_statement__ = 4;
      validate_non_negative_index("z", "2", 2);
      std::vector<std::vector<local_scalar_t__>> z;
      z = std::vector<std::vector<local_scalar_t__>>(N, std::vector<local_scalar_t__>(2, 0));
      
      current_statement__ = 4;
      assign(z, nil_index_list(),
        integrate_ode_rk45(dz_dt_functor__(), z_init, 0, ts, theta,
          rep_array(0.0, 0), rep_array(0, 0), pstream__, 1e-5, 1e-3, 5e2),
        "assigning variable z");
      {
        current_statement__ = 12;
        lp_accum__.add(
          normal_log<propto__>(
            rvalue(theta,
              cons_list(index_multi(stan::math::array_builder<int>().add(1)
                .add(3).array()), nil_index_list()), "theta"), 1, 0.5));
        current_statement__ = 13;
        lp_accum__.add(
          normal_log<propto__>(
            rvalue(theta,
              cons_list(index_multi(stan::math::array_builder<int>().add(2)
                .add(4).array()), nil_index_list()), "theta"), 0.05, 0.05));
        current_statement__ = 14;
        lp_accum__.add(lognormal_log<propto__>(sigma, -1, 1));
        current_statement__ = 15;
        lp_accum__.add(
          lognormal_log<propto__>(z_init, stan::math::log(10), 1));
        current_statement__ = 19;
        for (size_t k = 1; k <= 2; ++k) {
          current_statement__ = 16;
          lp_accum__.add(
            lognormal_log<propto__>(y_init[(k - 1)],
              stan::math::log(z_init[(k - 1)]), sigma[(k - 1)]));
          current_statement__ = 17;
          lp_accum__.add(
            lognormal_log<propto__>(
              rvalue(y,
                cons_list(index_omni(),
                  cons_list(index_uni(k), nil_index_list())), "y"),
              stan::math::log(
                rvalue(z,
                  cons_list(index_omni(),
                    cons_list(index_uni(k), nil_index_list())), "z")),
              sigma[(k - 1)]));}
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob() 
    
  template <typename RNG>
  void write_array(RNG& base_rng__, std::vector<double>& params_r__,
                   std::vector<int>& params_i__, std::vector<double>& vars__,
                   bool emit_transformed_parameters__ = true,
                   bool emit_generated_quantities__ = true,
                   std::ostream* pstream__ = 0) const {
    typedef double local_scalar_t__;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "lotka_volterra_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    
    try {
      current_statement__ = 1;
      validate_non_negative_index("theta", "4", 4);
      std::vector<double> theta;
      theta = std::vector<double>(4, 0);
      
      current_statement__ = 1;
      for (size_t sym1__ = 1; sym1__ <= 4; ++sym1__) {
        current_statement__ = 1;
        assign(theta, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable theta");}
      current_statement__ = 1;
      for (size_t sym1__ = 1; sym1__ <= 4; ++sym1__) {
        current_statement__ = 1;
        assign(theta, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(theta[(sym1__ - 1)], 0),
          "assigning variable theta");}
      current_statement__ = 2;
      validate_non_negative_index("z_init", "2", 2);
      std::vector<double> z_init;
      z_init = std::vector<double>(2, 0);
      
      current_statement__ = 2;
      for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 2;
        assign(z_init, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable z_init");}
      current_statement__ = 2;
      for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 2;
        assign(z_init, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(z_init[(sym1__ - 1)], 0),
          "assigning variable z_init");}
      current_statement__ = 3;
      validate_non_negative_index("sigma", "2", 2);
      std::vector<double> sigma;
      sigma = std::vector<double>(2, 0);
      
      current_statement__ = 3;
      for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 3;
        assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable sigma");}
      current_statement__ = 3;
      for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 3;
        assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(sigma[(sym1__ - 1)], 0),
          "assigning variable sigma");}
      current_statement__ = 4;
      validate_non_negative_index("z", "N", N);
      current_statement__ = 4;
      validate_non_negative_index("z", "2", 2);
      std::vector<std::vector<double>> z;
      z = std::vector<std::vector<double>>(N, std::vector<double>(2, 0));
      
      for (size_t sym1__ = 1; sym1__ <= 4; ++sym1__) {
        vars__.push_back(theta[(sym1__ - 1)]);}
      for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.push_back(z_init[(sym1__ - 1)]);}
      for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.push_back(sigma[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 4;
      assign(z, nil_index_list(),
        integrate_ode_rk45(dz_dt_functor__(), z_init, 0, ts, theta,
          rep_array(0.0, 0), rep_array(0, 0), pstream__, 1e-5, 1e-3, 5e2),
        "assigning variable z");
      for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (size_t sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.push_back(z[(sym2__ - 1)][(sym1__ - 1)]);}}
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      current_statement__ = 5;
      validate_non_negative_index("y_init_rep", "2", 2);
      std::vector<double> y_init_rep;
      y_init_rep = std::vector<double>(2, 0);
      
      current_statement__ = 6;
      validate_non_negative_index("y_rep", "N", N);
      current_statement__ = 6;
      validate_non_negative_index("y_rep", "2", 2);
      std::vector<std::vector<double>> y_rep;
      y_rep = std::vector<std::vector<double>>(N, std::vector<double>(2, 0));
      
      current_statement__ = 11;
      for (size_t k = 1; k <= 2; ++k) {
        current_statement__ = 7;
        assign(y_init_rep, cons_list(index_uni(k), nil_index_list()),
          lognormal_rng(stan::math::log(z_init[(k - 1)]), sigma[(k - 1)],
            base_rng__), "assigning variable y_init_rep");
        current_statement__ = 9;
        for (size_t n = 1; n <= N; ++n) {
          current_statement__ = 8;
          assign(y_rep,
            cons_list(index_uni(n),
              cons_list(index_uni(k), nil_index_list())),
            lognormal_rng(stan::math::log(z[(n - 1)][(k - 1)]),
              sigma[(k - 1)], base_rng__), "assigning variable y_rep");}}
      for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.push_back(y_init_rep[(sym1__ - 1)]);}
      for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
        for (size_t sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.push_back(y_rep[(sym2__ - 1)][(sym1__ - 1)]);}}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array() 
    
  void transform_inits(const stan::io::var_context& context__,
                       std::vector<int>& params_i__,
                       std::vector<double>& vars__, std::ostream* pstream__) const {
    typedef double local_scalar_t__;
    vars__.resize(0);
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      
      pos__ = 1;
      current_statement__ = 1;
      validate_non_negative_index("theta", "4", 4);
      std::vector<double> theta;
      theta = std::vector<double>(4, 0);
      
      current_statement__ = 1;
      assign(theta, nil_index_list(), context__.vals_r("theta"),
        "assigning variable theta");
      current_statement__ = 1;
      for (size_t sym1__ = 1; sym1__ <= 4; ++sym1__) {
        current_statement__ = 1;
        assign(theta, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(theta[(sym1__ - 1)], 0),
          "assigning variable theta");}
      current_statement__ = 2;
      validate_non_negative_index("z_init", "2", 2);
      std::vector<double> z_init;
      z_init = std::vector<double>(2, 0);
      
      current_statement__ = 2;
      assign(z_init, nil_index_list(), context__.vals_r("z_init"),
        "assigning variable z_init");
      current_statement__ = 2;
      for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 2;
        assign(z_init, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(z_init[(sym1__ - 1)], 0),
          "assigning variable z_init");}
      current_statement__ = 3;
      validate_non_negative_index("sigma", "2", 2);
      std::vector<double> sigma;
      sigma = std::vector<double>(2, 0);
      
      current_statement__ = 3;
      assign(sigma, nil_index_list(), context__.vals_r("sigma"),
        "assigning variable sigma");
      current_statement__ = 3;
      for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
        current_statement__ = 3;
        assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(sigma[(sym1__ - 1)], 0),
          "assigning variable sigma");}
      for (size_t sym1__ = 1; sym1__ <= 4; ++sym1__) {
        vars__.push_back(theta[(sym1__ - 1)]);}
      for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.push_back(z_init[(sym1__ - 1)]);}
      for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
        vars__.push_back(sigma[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits() 
    
  void get_param_names(std::vector<std::string>& names__) const {
    
    names__.resize(0);
    names__.push_back("theta");
    names__.push_back("z_init");
    names__.push_back("sigma");
    names__.push_back("z");
    names__.push_back("y_init_rep");
    names__.push_back("y_rep");
    } // get_param_names() 
    
  void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.resize(0);
    std::vector<size_t> dims__;
    dims__.push_back(4);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(2);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(2);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(2);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(2);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N);
    
    dims__.push_back(2);
    dimss__.push_back(dims__);
    dims__.resize(0);
    
    } // get_dims() 
    
  void constrained_param_names(std::vector<std::string>& param_names__,
                               bool emit_transformed_parameters__ = true,
                               bool emit_generated_quantities__ = true) const {
    
    for (size_t sym1__ = 1; sym1__ <= 4; ++sym1__) {
      {
        param_names__.push_back(std::string() + "theta" + '.' + std::to_string(sym1__));
      }}
    for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.push_back(std::string() + "z_init" + '.' + std::to_string(sym1__));
      }}
    for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.push_back(std::string() + "sigma" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (size_t sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.push_back(std::string() + "z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.push_back(std::string() + "y_init_rep" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (size_t sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.push_back(std::string() + "y_rep" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    } // constrained_param_names() 
    
  void unconstrained_param_names(std::vector<std::string>& param_names__,
                                 bool emit_transformed_parameters__ = true,
                                 bool emit_generated_quantities__ = true) const {
    
    for (size_t sym1__ = 1; sym1__ <= 4; ++sym1__) {
      {
        param_names__.push_back(std::string() + "theta" + '.' + std::to_string(sym1__));
      }}
    for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.push_back(std::string() + "z_init" + '.' + std::to_string(sym1__));
      }}
    for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
      {
        param_names__.push_back(std::string() + "sigma" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (size_t sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.push_back(std::string() + "z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.push_back(std::string() + "y_init_rep" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          for (size_t sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.push_back(std::string() + "y_rep" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    } // unconstrained_param_names() 
    
  std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"theta\",\"type\":{\"name\":\"array\",\"length\":" << 4 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_init\",\"type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"y_init_rep\",\"type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y_rep\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"theta\",\"type\":{\"name\":\"array\",\"length\":" << 4 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_init\",\"type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"y_init_rep\",\"type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"y_rep\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"array\",\"length\":" << 2 << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool emit_transformed_parameters__ = true,
                     bool emit_generated_quantities__ = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng__, params_r_vec, params_i_vec, vars_vec,
          emit_transformed_parameters__, emit_generated_quantities__, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    template <bool propto__, bool jacobian__, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto__,jacobian__,T_>(vec_params_r, vec_params_i, pstream);
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }

};
}
typedef lotka_volterra_model_namespace::lotka_volterra_model stan_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif


